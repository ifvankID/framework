#!/bin/bash

sdcard_path="/sdcard"
work_dir="$PWD"

GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m'

apkeditor() {
    local jarfile="$work_dir/tool/APKEditor.jar"
    if [[ ! -f "$jarfile" ]]; then
        echo -e "${RED}ERROR: APKEditor.jar not found in tool/ folder!${NC}"
        return 1
    fi
    java -Xmx4096M -Dfile.encoding=utf-8 -Djdk.util.zip.disableZip64ExtraFieldValidation=true -Djdk.nio.zipfs.allowDotZipEntry=true -jar "$jarfile" "$@" > /dev/null 2>&1
}

run_with_spinner() {
    local message="$1"
    shift
    "$@" &
    local PID=$!
    local spin='⣾⣽⣻⢿⡿⣟⣯⣷'
    local i=0
    while kill -0 $PID 2>/dev/null; do
        i=$(( (i+1) % 8 ))
        printf "\r[*] %s %s" "$message" "${spin:$i:1}"
        sleep 0.1
    done
    wait $PID
    if [ $? -eq 0 ]; then
        printf "\r[*] %s [✓]\n" "$message"
        return 0
    else
        printf "\r[*] %s [✗]\n" "$message"
        return 1
    fi
}

run_patch_and_succeed() {
    "$@"
    return 0
}

cleanup_workspace() {
    rm -rf ifvank_* repacked.apk services.jar miui-services.jar *.bak > /dev/null 2>&1
}

apply_services_patches() {
    local unpack_dir="$1"
    
    find "$unpack_dir" -type f -name "*.smali" -exec perl -0777 -i -pe 's/(\.method.*?isSecureLocked\(\)Z)[\s\S]*?(\.end method)/$1\n    .locals 1\n    const\/4 v0, 0x0\n    return v0\n$2/g' {} +
    
    find "$unpack_dir" -type f -name "*.smali" -exec perl -0777 -i -pe 's/(\.method public notifyScreenshotListeners\(I\)Ljava\/util\/List;)[\s\S]*?(\.end method)/$1\n    .locals 1\n    const\/4 v0, 0x0\n    return-object v0\n$2/g' {} +
}

apply_miui_services_patches() {
    local unpack_dir="$1"

    find "$unpack_dir" -type f -name "*.smali" -exec perl -0777 -i -pe 's/(\.method public notAllowCaptureDisplay\(Lcom\/android\/server\/wm\/RootWindowContainer;I\)Z)[\s\S]*?(\.end method)/$1\n    .locals 1\n    const\/4 v0, 0x0\n    return v0\n$2/g' {} +
}

run_patch_cycle() {
    local jar_name="$1"
    local patch_function="$2"
    
    local source_file="$sdcard_path/$jar_name"
    local unpack_dir="ifvank_$(basename "$jar_name" .jar)"

    if [[ ! -f "$source_file" ]]; then
        echo -e "[*] ${RED}${jar_name} not found. skipping.${NC}"
        return
    fi
    
    any_file_found=true

    cp "$source_file" "$work_dir/$jar_name"
    
    if ! run_with_spinner "Unpacking $jar_name..." apkeditor d -i "$jar_name" -o "$unpack_dir"; then
        echo -e "${RED}ERROR: Failed to unpack $jar_name.${NC}"
        rm -rf "$jar_name" "$unpack_dir"
        return
    fi
    
    run_with_spinner "Patching $jar_name..." run_patch_and_succeed "$patch_function" "$unpack_dir"
    
    repack_jar() { 
        local base_name=$(basename "$jar_name" .jar)
        apkeditor b -i "$unpack_dir" -o "${base_name}-patched.apk" \
        && mv "${base_name}-patched.apk" "$sdcard_path/${base_name}-patched.jar"
    }
    
    if run_with_spinner "Repacking $jar_name..." repack_jar; then
        echo -e "Output : ${GREEN}$sdcard_path/${jar_name%.jar}-patched.jar${NC}\n"
        any_success=true
    else
        echo -e "${RED}ERROR: Failed to repack $jar_name.${NC}\n"
    fi

    rm -rf "$jar_name" "$unpack_dir" "repacked.apk" > /dev/null 2>&1
}

clear
echo "================================"
echo -e "      ${GREEN}Disable Flag Secure${NC}"
echo "================================"
echo ""

cleanup_workspace

any_success=false
any_file_found=false 

run_patch_cycle "services.jar" "apply_services_patches"
run_patch_cycle "miui-services.jar" "apply_miui_services_patches"

if [ "$any_success" = true ]; then
    echo -e "\n  ${GREEN}'Disable Secure Flag' patch applied.${NC}"
fi

if [ "$any_file_found" = false ]; then
    echo -e "  ${RED}✗${NC} No relevant JAR file found on $sdcard_path."
fi

echo ""
