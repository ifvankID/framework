#!/bin/bash

# --- Konfigurasi ---
sdcard_path="/sdcard"
work_dir="$PWD"

# --- Warna untuk Output ---
GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# --- Fungsi Bantuan ---

apkeditor() {
    local jarfile="$work_dir/tool/APKEditor.jar"
    if [[ ! -f "$jarfile" ]]; then
        echo -e "${RED}ERROR: APKEditor.jar tidak ditemukan di folder tool/${NC}"
        return 1
    fi
    java -Xmx4096M -jar "$jarfile" "$@" > /dev/null 2>&1
}

run_with_spinner() {
    local message="$1"
    shift
    "$@" &
    local PID=$!
    local spin='⣾⣽⣻⢿⡿⣟⣯⣷'
    local i=0
    echo -ne "[*] $message   "
    while kill -0 $PID 2>/dev/null; do
        i=$(( (i+1) % 8 ))
        printf "\b${spin:$i:1}"
        sleep 0.1
    done
    wait $PID
    if [ $? -eq 0 ]; then
        printf "\b[${GREEN}✓${NC}]\n"
        return 0
    else
        printf "\b[${RED}✗${NC}]\n"
        return 1
    fi
}

run_patch_and_succeed() {
    "$@"
    return 0
}

cleanup_workspace() {
    rm -rf *_unpacked repacked.apk framework.jar services.jar *.bak > /dev/null 2>&1
}

apply_framework_patches() {
    local unpack_dir="$1"
 
    find "$unpack_dir" -type f -name "*.smali" -exec perl -0777 -i -pe 's/(\.method.*?getMinimumSignatureSchemeVersionForTargetSdk.*?\(.*?\).*?I)[\s\S]*?(\.end method)/$1\n    .locals 1\n    const\/4 v0, 0x0\n    return v0\n$2/g' {} +
    find "$unpack_dir" -type f -name "*.smali" -exec perl -0777 -i -pe 's/(\.method[^\n]*\sverifyMessageDigest\s*\(\[B\[B\)Z)[\s\S]*?(\.end method)/$1\n    .locals 1\n    const\/4 v0, 0x1\n    return v0\n$2/g' {} +
    find "$unpack_dir" -type f -name "*.smali" -exec perl -0777 -i -pe 's/(\.method.*?checkCapability\(.*?\)Z)[\s\S]*?(\.end method)/$1\n    .locals 1\n    const\/4 v0, 0x1\n    return v0\n$2/g' {} +
    find "$unpack_dir" -type f -name "*.smali" -exec perl -0777 -i -pe 's/(\.method.*?checkCapabilityRecover\(.*?\)Z)[\s\S]*?(\.end method)/$1\n    .locals 1\n    const\/4 v0, 0x1\n    return v0\n$2/g' {} +
    find "$unpack_dir" -type f -name "*.smali" -exec perl -0777 -i -pe 's/(\.method.*?isPackageWhitelistedForHiddenApis\(.*?\)Z)[\s\S]*?(\.end method)/$1\n    .locals 1\n    const\/4 v0, 0x1\n    return v0\n$2/g' {} +

    local apk_verifier=$(find "$unpack_dir" -type f -name "ApkSignatureVerifier.smali" | head -n 1)
    if [ -n "$apk_verifier" ]; then
        perl -0777 -i -pe 's/(invoke-interface \{v0\}, Landroid\/content\/pm\/parsing\/result\/ParseResult;->isError\(\)Z\s*\n\s*move-result v1)/$1\n\n    const\/4 v1, 0x0/s' "$apk_verifier"
        sed -i '/invoke-static.*verifyV1Signature/i \    const\/4 p3, 0x0' "$apk_verifier"
        sed -i '/invoke-static.*verifyV2Signature/i \    const\/4 p3, 0x0' "$apk_verifier"
        sed -i '/invoke-static.*verifyV3Signature/i \    const\/4 p3, 0x0' "$apk_verifier"
        sed -i '/invoke-static.*verifyV3AndBelowSignatures/i \    const\/4 p3, 0x0' "$apk_verifier"
        sed -i '/invoke-static.*verifyV4Signature/i \    const\/4 p3, 0x0' "$apk_verifier"
    fi

    local strict_jar_file=$(find "$unpack_dir" -type f -path "*/android/util/jar/StrictJarFile.smali" | head -n 1)
    if [ -n "$strict_jar_file" ]; then
        perl -0777 -i -pe 's/(move-result-object\s+v\d+\s*\n\s*)if-eqz\s+v\d+,\s*(:cond_[\da-fA-F]+)([\s\S]*?)\2/$1$3/s' "$strict_jar_file"
    fi
    
}

apply_services_patches() {
    local unpack_dir="$1"
    
    # --- Method Body Replacements ---
    find "$unpack_dir" -type f -name "*.smali" -exec perl -0777 -i -pe 's/(\.method.*?checkDowngrade.*?\(.*?\).*?V)[\s\S]*?(\.end method)/$1\n    .locals 0\n    return-void\n$2/g' {} +
    find "$unpack_dir" -type f -name "*.smali" -exec perl -0777 -i -pe 's/(\.method.*?shouldCheckUpgradeKeySetLocked.*?\(.*?\).*?Z)[\s\S]*?(\.end method)/$1\n    .locals 1\n    const\/4 v0, 0x0\n    return v0\n$2/g' {} +
    find "$unpack_dir" -type f -name "*.smali" -exec perl -0777 -i -pe 's/(\.method.*?verifySignatures.*?\(.*?\).*?Z)[\s\S]*?(\.end method)/$1\n    .locals 1\n    const\/4 v0, 0x0\n    return v0\n$2/g' {} +
    find "$unpack_dir" -type f -name "*.smali" -exec perl -0777 -i -pe 's/(\.method.*?compareSignatures.*?\(.*?\).*?I)[\s\S]*?(\.end method)/$1\n    .locals 1\n    const\/4 v0, 0x0\n    return v0\n$2/g' {} +
    find "$unpack_dir" -type f -name "*.smali" -exec perl -0777 -i -pe 's/(\.method.*?matchSignaturesCompat.*?\(.*?\).*?Z)[\s\S]*?(\.end method)/$1\n    .locals 1\n    const\/4 v0, 0x1\n    return v0\n$2/g' {} +

    # --- Specific Insertions (untuk kedua versi) ---
    # Mencari dan patch versi 1 (v10, .../parsing/pkg/...)
    find "$unpack_dir" -type f -name "*.smali" -exec perl -0777 -i -pe 's/(invoke-interface \{v10\}, Lcom\/android\/server\/pm\/parsing\/pkg\/AndroidPackage;->isPersistent\(\)Z\s*\n\s*move-result v2)/$1\n\n    const\/4 v2, 0x0/g' {} +
    
    # Mencari dan patch versi 2 (v4, .../pm/pkg/...)
    find "$unpack_dir" -type f -name "*.smali" -exec perl -0777 -i -pe 's/(invoke-interface \{v4\}, Lcom\/android\/server\/pm\/pkg\/AndroidPackage;->isPersistent\(\)Z\s*\n\s*move-result v2)/$1\n\n    const\/4 v2, 0x0/g' {} +

}

run_patch_cycle() {
    local jar_name="$1"
    local patch_function="$2"
    local unpack_dir="${jar_name%.*}_unpacked"
    
    local source_file="$sdcard_path/$jar_name"
    if [[ ! -f "$source_file" ]]; then
        echo -e "[*] ${RED}${jar_name} not found. skipping.${NC}"
        return
    fi
    
    any_file_found=true
    cp "$source_file" .
    
    if ! run_with_spinner "Unpacking $jar_name..." apkeditor d -i "$jar_name" -o "$unpack_dir"; then
        echo -e "${RED}ERROR: Failed to unpack ${jar_name}.${NC}"
        return
    fi
    
    run_with_spinner "Patching $jar_name..." run_patch_and_succeed "$patch_function" "$unpack_dir"
    
    repack_jar() { 
        apkeditor b -i "$unpack_dir" -o "repacked.apk"
    }
    
    if ! run_with_spinner "Repacking $jar_name..." repack_jar; then
        echo -e "${RED}ERROR: Failed to repack ${jar_name}.${NC}"
        return
    fi

    local output_filename="$sdcard_path/${jar_name%.*}-patched.jar"
    mv "repacked.apk" "$output_filename"
    echo -e "Output : ${GREEN}$output_filename${NC}\n"
    any_success=true
}

clear
echo "=========================================="
echo -e "      ${GREEN}Disable Signature Verification${NC}"
echo "=========================================="
echo ""

cleanup_workspace

any_success=false
any_file_found=false 

run_patch_cycle "framework.jar" "apply_framework_patches"
run_patch_cycle "services.jar" "apply_services_patches"

if [ "$any_success" = true ]; then
    echo -e "\n  ${GREEN}'Disable Signature Verification A13-A14' applied.${NC}"
fi

if [ "$any_file_found" = false ]; then
    echo -e "  ${RED}✗ JAR file not found on $sdcard_path.${NC}"
fi

echo ""
cleanup_workspace
