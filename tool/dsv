#!/bin/bash

sdcard_path="/sdcard"
work_dir=$PWD
GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m'

apkeditor() {
    local jarfile=$work_dir/tool/APKEditor.jar
    if [[ ! -f "$jarfile" ]]; then
        echo -e "${RED}ERROR: APKEditor.jar not found in tool/ folder!${NC}"
        return 1
    fi
    java -Xmx4096M -Dfile.encoding=utf-8 -Djdk.util.zip.disableZip64ExtraFieldValidation=true -Djdk.nio.zipfs.allowDotZipEntry=true -jar "$jarfile" "$@" > /dev/null 2>&1
}

run_with_spinner() {
    local message="$1"
    shift
    "$@" &
    local PID=$!
    local spin='⣾⣽⣻⢿⡿⣟⣯p'
    local i=0
    while kill -0 $PID 2>/dev/null; do
        i=$(( (i+1) % 8 ))
        printf "\r[*] %s %s" "$message" "${spin:$i:1}"
        sleep 0.1
    done
    wait $PID
    if [ $? -eq 0 ]; then
        printf "\r[*] %s [${GREEN}✓${NC}]\n" "$message"
        return 0
    else
        printf "\r[*] %s [${RED}✗${NC}]\n" "$message"
        return 1
    fi
}

run_patch_and_succeed() {
    "$@"
    return 0
}

apply_framework_patches() {
    local unpack_dir="$1"
    local package_parser=$(find "$unpack_dir" -type f -name "PackageParser.smali" | head -n 1)
    local package_parser_exception=$(find "$unpack_dir" -type f -name "PackageParser\$PackageParserException.smali" | head -n 1)
    local package_parser_signing_details=$(find "$unpack_dir" -type f -name "PackageParser\$SigningDetails.smali" | head -n 1)
    local signing_details=$(find "$unpack_dir" -type f -name "SigningDetails.smali" | grep 'android/content/pm/SigningDetails.smali' | head -n 1)
    local v2_verifier=$(find "$unpack_dir" -type f -name "ApkSignatureSchemeV2Verifier.smali" | head -n 1)
    local v3_verifier=$(find "$unpack_dir" -type f -name "ApkSignatureSchemeV3Verifier.smali" | head -n 1)
    local apk_verifier=$(find "$unpack_dir" -type f -name "ApkSignatureVerifier.smali" | head -n 1)
    local signing_block_utils=$(find "$unpack_dir" -type f -name "ApkSigningBlockUtils.smali" | head -n 1)
    local strict_jar_verifier=$(find "$unpack_dir" -type f -name "StrictJarVerifier.smali" | head -n 1)
    local strict_jar_file=$(find "$unpack_dir" -type f -name "StrictJarFile.smali" | head -n 1)
    local parsing_utils=$(find "$unpack_dir" -type f -name "ParsingPackageUtils.smali" | head -n 1)

    [ -n "$package_parser" ] && perl -0777 -i -pe 's/(const-string\s+[vp]\d+,\s*"android"\s*\n\s*iget-object\s+[vp]\d+,\s*[vp]\d+,\s*.*?->packageName:Ljava\/lang\/String;\s*\n\s*invoke-virtual\s*\{[^{}]+\},\s*Ljava\/lang\/Object;->equals\(Ljava\/lang\/Object;\)Z\s*\n\s*move-result\s+([vp]\d+))/$1\n\n    const\/4 $2, 0x1/g' "$package_parser"
    if [ -n "$parsing_utils" ]; then
        perl -0777 -i -pe 's/(invoke-interface\s*\{v2\},\s*Landroid\/content\/pm\/parsing\/result\/ParseResult;->isError\(\)Z\s*\n\s*move-result\s+v4)/$1\n    const\/4 v4, 0x0/s' "$parsing_utils"
        if ! grep -q 'const/4 v4, 0x0' "$parsing_utils"; then
            perl -0777 -i -pe 's/(\.method.*?parseSharedUser[\s\S]*?)(move-result\s+v4)([\s\S]*?if-eqz\s+v4,[\s\S]*?"<manifest> specifies bad sharedUserId name \\""[\s\S]*?\.end method)/$1$2\n    const\/4 v4, 0x0$3/s' "$parsing_utils"
        fi
    fi
    [ -n "$package_parser_exception" ] && sed -i '/iput\s*p1,\s*p0,\s*Landroid\/content\/pm\/PackageParser\$PackageParserException;->error:I/i \    const\/4 p1, 0x0' "$package_parser_exception"
    [ -n "$package_parser_signing_details" ] && perl -0777 -i -pe 's/(\.method.*?checkCapability.*?\(.*?\).*?Z)(.|\n)*?(\.end method)/$1\n    .locals 1\n    const\/4 v0, 0x1\n    return v0\n$3/g' "$package_parser_signing_details"
    [ -n "$signing_details" ] && perl -0777 -i -pe 's/(\.method.*?checkCapability.*?\(.*?\).*?Z)(.|\n)*?(\.end method)/$1\n    .locals 1\n    const\/4 v0, 0x1\n    return v0\n$3/g' "$signing_details"
    [ -n "$signing_details" ] && perl -0777 -i -pe 's/(\.method.*?hasAncestorOrSelf.*?\(.*?\).*?Z)(.|\n)*?(\.end method)/$1\n    .locals 1\n    const\/4 v0, 0x1\n    return v0\n$3/g' "$signing_details"
    [ -n "$v2_verifier" ] && perl -0777 -i -pe 's/(invoke-static\s*\{v\d+, v\d+\},\s*Ljava\/security\/MessageDigest;->isEqual\(\[B\[B\)Z\s*\n\s*)move-result v0/$1const\/4 v0, 0x1/sg' "$v2_verifier"
    [ -n "$v3_verifier" ] && perl -0777 -i -pe 's/(invoke-static\s*\{v\d+, v\d+\},\s*Ljava\/security\/MessageDigest;->isEqual\(\[B\[B\)Z\s*\n\s*)move-result v0/$1const\/4 v0, 0x1/sg' "$v3_verifier"
    [ -n "$apk_verifier" ] && perl -0777 -i -pe 's/(\.method.*?getMinimumSignatureSchemeVersionForTargetSdk.*?\(I\)I)(.|\n)*?(\.end method)/$1\n    .locals 1\n    const\/4 v0, 0x0\n    return v0\n$3/g' "$apk_verifier"
    [ -n "$apk_verifier" ] && sed -i '/invoke-static.*verifyV1Signature/i \    const p3, 0x0' "$apk_verifier"
    [ -n "$signing_block_utils" ] && perl -0777 -i -pe 's/(invoke-static\s*\{v\d+, v\d+\},\s*Ljava\/security\/MessageDigest;->isEqual\(\[B\[B\)Z\s*\n\s*)move-result v\d+/$1const\/4 v7, 0x1/sg' "$signing_block_utils"
    [ -n "$strict_jar_verifier" ] && perl -0777 -i -pe 's/(\.method.*?verifyMessageDigest.*?\(.*?\).*?Z)(.|\n)*?(\.end method)/$1\n    .locals 1\n    const\/4 v0, 0x1\n    return v0\n$3/g' "$strict_jar_verifier"
    [ -n "$strict_jar_file" ] && perl -0777 -i -pe 's/(move-result-object\s+v\d+\s*)if-eqz\s+v\d+,\s*(:cond_[\da-fA-F]+)([\s\S]*?)\2/$1$3/s' "$strict_jar_file"
}

apply_services_patches() {
    local unpack_dir="$1"
    find "$unpack_dir" -type f -name "*.smali" -exec perl -0777 -i -pe 's/(\.method.*?checkDowngrade.*?\(.*?\).*?V)[\s\S]*?(\.end method)/$1\n    .locals 0\n    return-void\n$2/g' {} +
    find "$unpack_dir" -type f -name "*.smali" -exec perl -0777 -i -pe 's/(\.method.*?shouldCheckUpgradeKeySetLocked.*?\(.*?\).*?Z)[\s\S]*?(\.end method)/$1\n    .locals 1\n    const\/4 v0, 0x0\n    return v0\n$2/g' {} +
    find "$unpack_dir" -type f -name "*.smali" -exec perl -0777 -i -pe 's/(\.method.*?verifySignatures.*?\(.*?\).*?Z)[\s\S]*?(\.end method)/$1\n    .locals 1\n    const\/4 v0, 0x0\n    return v0\n$2/g' {} +
    find "$unpack_dir" -type f -name "*.smali" -exec perl -0777 -i -pe 's/(\.method.*?compareSignatures.*?\(.*?\).*?I)[\s\S]*?(\.end method)/$1\n    .locals 1\n    const\/4 v0, 0x0\n    return v0\n$2/g' {} +
    find "$unpack_dir" -type f -name "*.smali" -exec perl -0777 -i -pe 's/(\.method.*?matchSignaturesCompat.*?\(.*?\).*?Z)[\s\S]*?(\.end method)/$1\n    .locals 1\n    const\/4 v0, 0x1\n    return v0\n$2/g' {} +
    local install_helper=$(find "$unpack_dir" -type f -path "*/pm/InstallPackageHelper.smali" | head -n 1)
    [ -n "$install_helper" ] && perl -0777 -i -pe 's/(invoke-virtual\s*\{[^{}]+\},\s*Ljava\/lang\/Object;->equals\(Ljava\/lang\/Object;\)Z\s*\n\s*move-result\s+([vp]\d+))/$1\n\n    const\/4 $2, 0x1/g' "$install_helper"
    local reconcile_utils=$(find "$unpack_dir" -type f -path "*/pm/ReconcilePackageUtils.smali" | head -n 1)
    [ -n "$reconcile_utils" ] && perl -0777 -i -pe 's/(\.method static constructor <clinit>\(\)V[\s\S]*?const\/4\s+)([vp]\d+),\s*0x0/$1$2, 0x1/g' "$reconcile_utils"
}

apply_miui_services_patches() {
    local unpack_dir="$1"
    find "$unpack_dir" -type f -name "*.smali" -exec perl -0777 -i -pe 's/(\.method\s+public\s+canBeUpdate\(Ljava\/lang\/String;\)V)[\s\S]*?(\.end method)/$1\n    .locals 0\n    return-void\n$2/g' {} +
    find "$unpack_dir" -type f -name "*.smali" -exec perl -0777 -i -pe 's/(\.method.*?verifyIsolationViolation.*?\(.*?\).*?V)[\s\S]*?(\.end method)/$1\n    .locals 0\n    return-void\n$2/g' {} +
    apply_services_patches "$unpack_dir"
}

run_patch_cycle() {
    local jar_name="$1"
    local patch_function="$2"
    
    local source_file="$sdcard_path/$jar_name"
    local unpack_dir="ifvank_$(basename "$jar_name" .jar)"

    if [[ ! -f "$source_file" ]]; then
        echo -e "[*]${RED} ${jar_name} not found.${NC}"
        return
    fi
    
    any_file_found=true

    cp "$source_file" "$source_file.bak" 2>/dev/null
    cp "$source_file" "$work_dir/$jar_name"
    
    if ! run_with_spinner "Unpacking $jar_name..." apkeditor d -i "$jar_name" -o "$unpack_dir"; then
        echo -e "${RED}ERROR: Gagal membongkar $jar_name.${NC}"
        rm -rf "$jar_name" "$unpack_dir"
        return
    fi
    
    run_with_spinner "Patching $jar_name..." run_patch_and_succeed "$patch_function" "$unpack_dir"
    
    repack_jar() { 
        apkeditor b -i "$unpack_dir" -o "repacked.apk" >/dev/null 2>&1 && mv "repacked.apk" "$source_file"
    }
    
    if run_with_spinner "Repacking $jar_name..." repack_jar; then
        echo -e "Output : ${GREEN}$source_file${NC}\n"
        any_success=true
    else
        echo -e "${RED}GAGAL: Gagal mengepak ulang $jar_name. Mengembalikan dari backup.${NC}\n"
        mv "$source_file.bak" "$source_file" 2>/dev/null
    fi

    rm -rf "$jar_name" "$unpack_dir" "repacked.apk" "$source_file.bak" > /dev/null 2>&1
}

clear
echo "=========================================="
echo -e "     ${GREEN}Disable Signature Verification${NC}"
echo "=========================================="
echo ""

any_success=false
any_file_found=false 

run_patch_cycle "framework.jar" "apply_framework_patches"
run_patch_cycle "services.jar" "apply_services_patches"
run_patch_cycle "miui-services.jar" "apply_miui_services_patches"

if [ "$any_success" = true ]; then
    echo -e "  ${GREEN}✓${NC} Disable Signature Verification applied"
fi

if [ "$any_file_found" = false ]; then
    echo -e "  ${RED}✗${NC} No JAR files found in $sdcard_path."
fi

echo ""
